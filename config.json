{
    "model" : {
        "backend":              "MobileNet",    # "Tiny Yolo" or "Full Yolo" or "MobileNet" or "SqueezeNet" or "Inception3"
        "input_size_w":         416,
        "input_size_h":         416,
        "gray_mode":            false,
        "anchors":              [0.57273, 0.677385, 1.87446, 2.06253, 3.33843, 5.47434, 7.88282, 3.52778, 9.77052, 9.16828],     
        "labels":               ["hamster","cochon d inde", "loup", "coyote", "chat", "lynx", "guepard", "jaguar",  "orang-outan", "chimpanze"]
    },

    "parser_annotation_type":    "xml",

    "train": {
        "train_csv_file":       "",
        "train_csv_base_path":  "",
        "train_image_folder":   "/home/andy/data/raccoon_dataset/images/",
        "train_annot_folder":   "/home/andy/data/raccoon_dataset/anns/",      
          
        "callback":             null,           # a specific callback to apply into image augmentation
        "train_times":          10,             # the number of time to cycle through the training set, useful for small datasets
        "pretrained_weights":   "",             # specify the path of the pretrained weights, but it's fine to start from scratch
        "batch_size":           16,             # the number of images to read in each batch
        "learning_rate":        1e-4,           # the base learning rate of the default Adam rate scheduler
        "nb_epoch":             50,             # number of epoches
        "warmup_epochs":        3,              # the number of initial epochs during which the sizes of the 5 boxes in each cell is forced to match the sizes of the 5 anchors, this trick seems to improve precision emperically

        "workers":              3,
        "max_queue_size":       8,
        "early_stop":           false,
        "look_ahead":           true,           # Radam + Lookahead
        "cosine_decay":         true,           # warmup
        "tensorboard_log_dir":  "./logs/example",

        "object_scale":         5.0,           # determine how much to penalize wrong prediction of confidence of object predictors
        "no_object_scale":      1.0,            # determine how much to penalize wrong prediction of confidence of non-object predictors
        "coord_scale":          1.0,            # determine how much to penalize wrong position and size predictions (x, y, w, h)
        "class_scale":          1.0,            # determine how much to penalize wrong class prediction

        "saved_weights_name":   "full_yolo_voc",
        "debug":                true            # turn on/off the line that prints current confidence, position, size, class losses and recall
    },

    "valid": {
        "iou_threshold" :       0.7,           # parameters used for the map evaluation
        "score_threshold":      0.5,           # parameters used for the map evaluation
        "valid_csv_file":       "",
        "valid_csv_base_path":  "",
        "valid_image_folder":   "",
        "valid_annot_folder":   "",

        "valid_times":          1
    }

    "backup":{  #it is usefull for testing networks, this backup will save the whole repsoitory, and can be used again in the future
        "create_backup":        true,
        "redirect_model":       true,           #if true, will rename tensorboard_log_dir and saved_weights_name to keep in same directory
        "backup_path":          "../backup",
        "backup_prefix":        "full_yolo_VOC",
    }
}